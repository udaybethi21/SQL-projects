CREATE DATABASE IF NOT EXISTS Grocery_store;
USE Grocery_store;
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id) ON UPDATE CASCADE ON
    DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id) ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 1. Find the total number of orders placed by each customer.
select c.cust_id,count(o.ord_id)
 from customers as c
 left join orders as o
 on c.cust_id = o.cust_id
 group by c.cust_id;

-- 2. Determine the total revenue generated by each product.
 select p.prod_id ,p.prod_name ,(od.total_price ) as revenue
 from products as p
 left join order_details as od
 on p.prod_id = od.prod_id;

-- 3. Find the top 5 employees who have processed the most orders.
select e.emp_id,e.emp_name,count(o.emp_id) as numberOfOrders
from employees as e
left join orders as o
on e.emp_id=o.emp_id
group by e.emp_id,e.emp_name
order by numberOfOrders desc
limit 5;

-- 4. Identify the most popular product category based on the number of orders.
select p.cat_id,count(od.ord_id) as numberOforders
from products as p 
right join order_details as od
on p.prod_id = od.prod_id
group by p.cat_id
order by numberOforders desc
limit 1;

-- 5.Calculate the average order value for each customer.
select c.cust_id,c.cust_name,avg(od.total_price) as avg_order_value
from customers as c
join orders as o
on c.cust_id = o.cust_id
 join order_details as od
on o.ord_id = od.ord_id
group by c.cust_id,c.cust_name
;

-- 6.List all suppliers who provide more than 3 different products.
select   s.sup_id , s.sup_name ,count(prod_id)as products_cnt
 from supplier as s
 left join products as p 
 on s.sup_id = p.sup_id
 group by s.sup_id , s.sup_name 
having  count(p.prod_id) > 3
 order by products_cnt asc
;

-- 7. Find the total quantity of each product sold.
select p.prod_id,p.prod_name, sum(od.quantity) as total_quantity
 from products as p
 left join order_details as od
 on p.prod_id = od.prod_id
 group by p.prod_id,p.prod_name;
 
 -- 8.Determine the product with the highest sales revenue.
 select p.prod_id,p.prod_name, (sum(od.total_price)) as revenue
 from products as p
 left join order_details as od 
 on p.prod_id = od.prod_id
 group by p.prod_id,p.prod_name
 order by revenue desc
 limit 1;
 
  -- 9. Find the number of orders placed in each month.
select date_format(str_to_date(order_date, '%m/%d/%Y'), '%m') as month,count(ord_id) as number_of_orders
from orders
group by  month
order by month  asc;

-- 10. Identify customers who have never placed an order.
select c.cust_id,c.cust_name,(o.cust_id) as order_not_placed
 from customers as c
 left join orders as o
 on c.cust_id = o.cust_id
 where o.cust_id is null
 group by c.cust_id,c.cust_name;